{
  "task": {
    "title": "Refactor: Remove Old Exporters and Add FrontSteps Exporter",
    "prompt": "## GOAL\nRefactor the bulletin_builder project so that there is exactly ONE exporter: FrontStepsExporter.\n\nDelete ALL existing exporters (Email, Zip, Web, Raw, Package, etc.) and any related UI elements, menu items, or hotkeys. Keep only:\n- View in Browser (preview-only, no export)\n- Export Bulletin (FrontSteps) â€” which outputs body-only HTML for FrontSteps.\n\nThen:\n- Create a new module at src/exporters/frontsteps_exporter.py\n- Create a test at tests/test_frontsteps_exporter.py\n- Wire the new exporter into the toolbar as the only export action.\n- Ensure all old code is deleted and nothing breaks.\n- Run linter, tests, build, and commit.\n\n## STEP-BY-STEP\n\n1) **Remove all legacy exporters**\n   - Search for files, functions, and UI controls with names matching (case-insensitive): export, exporter, email, zip, package, download, clipboard, raw, web, saveHtml, saveEmail, bundle, newsletter, copy.\n   - Delete all of them, including their menu entries, hotkeys, and references.\n   - Leave ONLY: View in Browser.\n\n2) **Add FrontStepsExporter**\n   - File: src/exporters/frontsteps_exporter.py\n   - Must export body-only HTML string from current bulletin state.\n   - Follow these rules in output:\n      - No <!DOCTYPE>, <head>, or <body>\n      - Convert <section>/<article>/<header>/<footer>/<main>/<aside>/<nav> to <div>\n      - All <a> and <img> styles begin with margin:0; padding:0;\n      - All <table> include border-collapse:collapse; border-spacing:0;\n      - All <td> styles begin with border:none;\n      - Remove <picture>/<source> (keep <img> only)\n      - Preserve MSO/VML blocks intact\n      - Ensure no HTML-escaped tags like &lt;p&gt;\n\n3) **Wire into UI**\n   - Add one toolbar button: Export Bulletin (FrontSteps)\n   - Calls build_frontsteps_html(state) then copies to clipboard and optionally downloads as .html\n\n4) **Tests**\n   - File: tests/test_frontsteps_exporter.py\n   - Add tests that:\n      - Ensure no doctype/head/body\n      - Ensure <a>/<img>/<table>/<td> rules as above\n      - Ensure no escaped tags\n      - Ensure MSO blocks preserved\n      - Ensure <picture>/<source> removed\n      - Add snapshot test of a mock bulletin\n   - Make this run on CI\n\n5) **Commit**\n   - Run linter, tests, and build\n   - Commit message:\n     refactor(export): remove legacy exporters, add single FrontSteps exporter, add tests, clean UI\n",
    "files": [
      {
        "path": "src/exporters/frontsteps_exporter.py",
        "content": "import re\nfrom bs4 import BeautifulSoup\n\ndef build_frontsteps_html(state_html: str) -> str:\n    \"\"\"\n    Takes full HTML of the bulletin preview and returns body-only HTML ready for FrontSteps.\n    Applies email-safe inline rules.\n    \"\"\"\n    soup = BeautifulSoup(state_html, 'html.parser')\n\n    # Extract body\n    body = soup.body or soup\n\n    # Replace semantic containers with <div>\n    for tag in body.find_all(['section','article','header','footer','main','aside','nav']):\n        tag.name = 'div'\n\n    # Strip picture/source, keep <img>\n    for pic in body.find_all('picture'):\n        img = pic.find('img')\n        if img:\n            pic.replace_with(img)\n        else:\n            pic.decompose()\n    for src in body.find_all('source'):\n        src.decompose()\n\n    # Helper to prefix inline style\n    def prefix_style(el, required):\n        style = (el.get('style') or '').strip()\n        if not style.lower().startswith(required.lower()):\n            el['style'] = f\"{required} {style}\".strip()\n\n    # Enforce rules\n    for a in body.find_all('a'):\n        prefix_style(a, 'margin:0; padding:0;')\n    for img in body.find_all('img'):\n        prefix_style(img, 'margin:0; padding:0;')\n    for table in body.find_all('table'):\n        if 'style' in table.attrs:\n            if 'border-collapse' not in table['style']:\n                table['style'] = f\"border-collapse:collapse; border-spacing:0; {table['style']}\"\n        else:\n            table['style'] = 'border-collapse:collapse; border-spacing:0;'\n    for td in body.find_all('td'):\n        prefix_style(td, 'border:none;')\n\n    # Unescape encoded tags if any\n    html = str(body)\n    html = html.replace('&lt;', '<').replace('&gt;', '>').replace('&amp;', '&')\n\n    # Remove <!DOCTYPE>, <head>, <html>, <body> wrappers\n    html = re.sub(r'(?is)^.*?<body[^>]*>', '', html)\n    html = re.sub(r'(?is)</body>.*$', '', html)\n\n    return html.strip()\n"
      },
      {
        "path": "tests/test_frontsteps_exporter.py",
        "content": "import re\nfrom src.exporters.frontsteps_exporter import build_frontsteps_html\n\nMOCK_HTML = \"\"\"\n<!DOCTYPE html>\n<html>\n<head><title>Test</title></head>\n<body>\n  <section><article><p>Hello</p></article></section>\n  <a href='#'>link</a>\n  <img src='x.jpg'>\n  <table><tr><td>cell</td></tr></table>\n  <picture><img src='x.jpg'></picture>\n  <!--[if mso]><v:roundrect>hi</v:roundrect><![endif]-->\n</body>\n</html>\n\"\"\"\n\ndef test_export_rules():\n    html = build_frontsteps_html(MOCK_HTML)\n\n    # No doctype/head/body\n    assert '<!DOCTYPE' not in html\n    assert '<head' not in html\n    assert '<body' not in html\n\n    # Style rules\n    assert re.search(r'<a[^>]*style=\"margin:0; padding:0;', html)\n    assert re.search(r'<img[^>]*style=\"margin:0; padding:0;', html)\n    assert 'border-collapse:collapse' in html\n    assert 'border:none;' in html\n\n    # No picture/source\n    assert '<picture' not in html and '<source' not in html\n\n    # MSO preserved\n    assert '<!--[if mso]>' in html\n\n    # No escaped tags\n    assert '&lt;p&gt;' not in html\n"
      }
    ],
    "post_actions": [
      "Run: ruff check . --fix",
      "Run: pytest -q",
      "Run: npm run build or equivalent build command",
      "Commit with message: refactor(export): remove legacy exporters, add single FrontSteps exporter, add tests, clean UI"
    ]
  }
}
