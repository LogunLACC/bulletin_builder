{
  "task": {
    "title": "FrontSteps-only exporter + sanitizer-aware post-processing",
    "prompt": "## GOAL\nRefactor Bulletin Builder so there is exactly ONE export path for FrontSteps bulletins, and harden the export with a sanitizer-aware post-processing pipeline that matches what FrontSteps renders. Remove every other exporter (email, zip, raw, package, multi-variant, etc.). Keep only:\n- View in Browser (preview-only)\n- Export Bulletin (FrontSteps) — body-only HTML.\n\n## REQUIREMENTS (export output)\n- Body-only HTML (no <!DOCTYPE>, <html>, <head>, <body>)\n- Demote semantic tags (<section>/<article>/<header>/<footer>/<main>/<aside>/<nav>) -> <div>\n- Strip <picture>/<source> (keep <img>)\n- Prefix inline styles:\n  - <a>, <img>: \"margin:0; padding:0;\"\n  - <table>: include \"border-collapse:collapse; border-spacing:0;\"\n  - <td>: style begins with \"border:none;\"\n- Keep IDs on sections (e.g., #club-announcements), but **do not** rely on internal anchors in the TOC (FrontSteps strips them). Replace TOC anchors with <span> text.\n- Normalize lists to avoid FrontSteps forming double-nested ULs (e.g., <strong>Day</strong> followed by <ul>… becomes a single <ul><li><strong>Day</strong><ul>…</ul></li></ul>).\n- Convert button-like anchors to minimal links FrontSteps preserves (underline + inherit color; no heavy button tables/VML in export).\n- Decode any escaped HTML (&lt;p&gt; -> <p>), but keep MSO conditional comments intact if present upstream.\n- Optionally minify **without** disturbing MSO blocks.\n\n## ACTIONS\n1) Delete legacy exporters and their UI (email/zip/package/raw/web/clipboard variants). Only leave View in Browser and one toolbar button: \"Export Bulletin (FrontSteps)\".\n2) Add post-processing pipeline in src/exporters/postprocessors.py (functions below).\n3) Add FrontSteps exporter wrapper in src/exporters/frontsteps_exporter.py calling the pipeline.\n4) Add tests in tests/ to enforce sanitizer-aware rules (TOC anchors -> spans, list normalization, button simplification, image/table/td/a rules, body-only output).\n5) Run lint, tests, build, and commit.\n\n## ACCEPTANCE\n- Only 2 user-facing actions: View in Browser, Export Bulletin (FrontSteps).\n- Tests pass; build succeeds.\n- Exported HTML, when pasted to FrontSteps, renders clean (no double ULs, no dead TOC links, images/cards intact).\n",
    "files": [
      {
        "path": "src/exporters/postprocessors.py",
        "content": "import re\\nfrom typing import Iterable\\nfrom bs4 import BeautifulSoup\\n\\nMSO_OPEN = '<!--[if mso]>'\\nMSO_CLOSE = '<![endif]-->'\\nREQ_LINK_IMG = 'margin:0; padding:0;'\\nREQ_TABLE   = 'border-collapse:collapse; border-spacing:0;'\\nREQ_TD      = 'border:none;'\\nSEMANTIC_TAGS = [\"section\",\"article\",\"header\",\"footer\",\"main\",\"aside\",\"nav\"]\\nID_SAFE_RE = re.compile(r\"[^a-z0-9_\\-]+\")\\n\\n# ---- helpers ---------------------------------------------------------------\\n\\ndef _soup(html: str) -> BeautifulSoup:\\n    return BeautifulSoup(html, 'html.parser')\\n\\ndef _prefix_style(el, required: str):\\n    style = (el.get('style') or '').strip()\\n    if not style.lower().startswith(required.lower()):\\n        el['style'] = (required + (\" \" + style if style else \"\")).strip()\\n\\n# ---- transforms ------------------------------------------------------------\\n\\ndef demote_semantics(html: str) -> str:\\n    soup = _soup(html)\\n    body = soup.body or soup\\n    for tag in body.find_all(SEMANTIC_TAGS):\\n        tag.name = 'div'\\n    return str(soup)\\n\\n\\ndef strip_picture(html: str) -> str:\\n    soup = _soup(html)\\n    body = soup.body or soup\\n    for pic in body.find_all('picture'):\\n        img = pic.find('img')\\n        if img: pic.replace_with(img)\\n        else: pic.decompose()\\n    for src in body.find_all('source'):\\n        src.decompose()\\n    return str(soup)\\n\\n\\ndef enforce_inline_rules(html: str) -> str:\\n    soup = _soup(html)\\n    body = soup.body or soup\\n    for a in body.find_all('a'): _prefix_style(a, REQ_LINK_IMG)\\n    for img in body.find_all('img'): _prefix_style(img, REQ_LINK_IMG)\\n    for table in body.find_all('table'):\\n        style = (table.get('style') or '').strip()\\n        if 'border-collapse' not in style:\\n            table['style'] = (REQ_TABLE + (\" \" + style if style else \"\")).strip()\\n    for td in body.find_all('td'): _prefix_style(td, REQ_TD)\\n    return str(soup)\\n\\n\\ndef fix_anchors(html: str) -> str:\\n    \"\"\"Normalize IDs; update internal hrefs syntax (we later remove TOC anchors entirely).\"\"\"\\n    soup = _soup(html)\\n    body = soup.body or soup\\n    assigned = set()\\n    def safe_id(raw: str) -> str:\\n        base = ID_SAFE_RE.sub('-', (raw or '').lower()).strip('-') or 'section'\\n        i, cand = 1, base\\n        while cand in assigned: i += 1; cand = f\"{base}-{i}\"\\n        assigned.add(cand); return cand\\n    for h in body.find_all([\"h2\",\"h3\"]):\\n        hid = h.get('id')\\n        h['id'] = safe_id(hid or h.get_text()[:64])\\n    for a in body.find_all('a'):\\n        href = a.get('href')\\n        if href and href.startswith('#'):\\n            a['href'] = '#' + ID_SAFE_RE.sub('-', href[1:].lower()).strip('-')\\n    return str(soup)\\n\\n\\ndef kill_internal_toc_links(html: str) -> str:\\n    \"\"\"Replace TOC anchors (#...) with <span> labels so FrontSteps doesn't neuter them oddly.\"\"\"\\n    soup = _soup(html)\\n    for ul in soup.find_all('ul'):\\n        anchors = ul.find_all('a', href=True)\\n        if anchors and all(a['href'].startswith('#') for a in anchors):\\n            for a in anchors:\\n                span = soup.new_tag('span')\\n                span.string = a.get_text(strip=True)\\n                span['style'] = 'margin:0; padding:0; border:none;'\\n                a.replace_with(span)\\n    return str(soup)\\n\\n\\ndef normalize_lists(html: str) -> str:\\n    \"\"\"Avoid double-nested ULs: wrap dangling headings with the following UL into a single LI; ensure text nodes become LIs; flatten UL>UL.\"\"\"\\n    soup = _soup(html)\\n    # 1) <strong>Header</strong> + <ul>...  => <ul><li><strong>Header</strong><ul>...</ul></li></ul>\\n    for strong in soup.find_all('strong'):\\n        sib = strong.find_next_sibling()\\n        if sib and sib.name == 'ul' and strong.parent and strong.parent.name != 'li':\\n            # move both into a new li\\n            li = soup.new_tag('li')\\n            strong.extract(); sib.extract()\\n            li.append(strong); li.append(sib)\\n            # attach to an existing UL if parent is UL; otherwise create one nearby\\n            parent = strong.parent\\n            if parent and parent.name == 'ul': parent.append(li)\\n            else:\\n                new_ul = soup.new_tag('ul'); new_ul.append(li)\\n                (parent or soup.body or soup).append(new_ul)\\n    # 2) Flatten UL that directly contains UL without LIs\\n    for ul in list(soup.find_all('ul')):\\n        children = [c for c in ul.children if getattr(c, 'name', None)]\\n        if children and all(c.name == 'ul' for c in children):\\n            # Replace with first child UL to avoid UL>UL nesting\\n            ul.replace_with(children[0])\\n    # 3) Ensure all non-empty nodes inside UL are wrapped in LI\\n    for ul in soup.find_all('ul'):\\n        new_children = []\\n        for node in list(ul.children):\\n            if getattr(node, 'name', None) == 'li': new_children.append(node); continue\\n            text = ''\\n            if hasattr(node, 'get_text'): text = node.get_text(strip=True)\\n            else: text = str(node).strip()\\n            if text:\\n                li = soup.new_tag('li');\\n                if getattr(node, 'name', None): li.append(node)\\n                else: li.string = text\\n                new_children.append(li)\\n        if new_children:\\n            ul.clear()\\n            for c in new_children: ul.append(c)\\n    return str(soup)\\n\\n\\ndef buttons_minimal(html: str) -> str:\\n    \"\"\"Simplify button-like anchors into durable text links that FrontSteps won't mangle.\"\"\"\\n    soup = _soup(html)\\n    for a in soup.find_all('a', href=True):\\n        style = (a.get('style') or '').lower()\\n        if any(k in style for k in ['background', 'border-radius', 'display:inline-block', 'padding:']):\\n            a['style'] = 'margin:0; padding:0; color:inherit; text-decoration:underline; border:none;'\\n            if 'target' not in a.attrs: a['target'] = '_blank'\\n            if 'rel' not in a.attrs: a['rel'] = 'noopener noreferrer'\\n    # Remove stray VML if any reached here (export pipeline shouldn't add it)\\n    for t in soup.find_all(string=lambda s: isinstance(s, str) and 'urn:schemas-microsoft-com:vml' in s):\\n        t.extract()\\n    return str(soup)\\n\\n\\ndef decode_entities(html: str) -> str:\\n    html = html.replace('&lt;', '<').replace('&gt;', '>')\\n    html = html.replace('&amp;', '&')\\n    return html\\n\\n\\ndef minify_html(html: str) -> str:\\n    parts, i = [], 0\\n    ws = re.compile(r'>\\\\s+<')\\n    while i < len(html):\\n        s = html.find(MSO_OPEN, i)\\n        if s == -1:\\n            parts.append(ws.sub('><', html[i:]))\\n            break\\n        parts.append(ws.sub('><', html[i:s]))\\n        e = html.find(MSO_CLOSE, s)\\n        if e == -1: parts.append(html[s:]); break\\n        e += len(MSO_CLOSE)\\n        parts.append(html[s:e])\\n        i = e\\n    return ''.join(parts).strip()\\n\\n\\ndef finalize_body_only(html: str) -> str:\\n    soup = _soup(html)\\n    body = soup.body or soup\\n    return ''.join(str(c) for c in body.children).strip()\\n\\n\\ndef run_pipeline(state_html: str, *, minify: bool = True) -> str:\\n    html = state_html\\n    html = demote_semantics(html)\\n    html = strip_picture(html)\\n    html = normalize_lists(html)\\n    html = buttons_minimal(html)\\n    html = enforce_inline_rules(html)\\n    html = fix_anchors(html)\\n    html = kill_internal_toc_links(html)\\n    html = decode_entities(html)\\n    if minify: html = minify_html(html)\\n    return finalize_body_only(html)\\n"
      },
      {
        "path": "src/exporters/frontsteps_exporter.py",
        "content": "from src.exporters.postprocessors import run_pipeline\\n\\n# Single public entry point for the UI\\n\\ndef build_frontsteps_html(state_html: str, *, minify: bool = True) -> str:\\n    \"\"\"Return FrontSteps-ready, body-only HTML from the preview document HTML.\"\"\"\\n    return run_pipeline(state_html, minify=minify)\\n"
      },
      {
        "path": "tests/test_frontsteps_pipeline.py",
        "content": "import re\\nfrom src.exporters.frontsteps_exporter import build_frontsteps_html\\n\\nMOCK = \"\"\"\\n<!DOCTYPE html>\\n<html>\\n<head><title>preview</title></head>\\n<body>\\n  <div class=\\"header\\">\\n    <h1>ClubLife Weekly</h1>\\n    <ul>\\n      <li><a href=\\"#club-announcements\\">Club Announcements</a></li>\\n      <li><a href=\\"#club-events\\">Club Events</a></li>\\n      <li><a href=\\"#community-events\\">Community Events</a></li>\\n    </ul>\\n  </div>\\n\\n  <section id=\\"club-announcements\\">\\n    <h2>Club Announcements</h2>\\n    <article>\\n      <strong>Friday, Sept 19 2025</strong>\\n      <ul>\\n        <li>5:00 am – 6:30 am</li>\\n        <li>2:00 pm – 4:30 pm</li>\\n      </ul>\\n    </article>\\n    <article>\\n      <p>Thanks for coming to the Town Hall. Here's the deck.</p>\\n      <a href=\\"https://example.com/deck\\" style=\\"padding:12px; display:inline-block; background:#0067b8; color:#fff; border-radius:6px;\\">View Deck</a>\\n    </article>\\n  </section>\\n\\n  <section id=\\"club-events\\">\\n    <h2>Club Events</h2>\\n    <table><tr><td>card</td></tr></table>\\n    <a href=\\"#club-events\\">back</a>\\n    <img src=\\"x.jpg\\">\\n  </section>\\n\\n  <section id=\\"community-events\\"><h2>Community Events</h2></section>\\n</body>\\n</html>\\n\"\"\"\\n\\n\\ndef test_body_only_and_rules():\\n    html = build_frontsteps_html(MOCK)\\n\\n    # Body-only (no wrappers)\\n    assert '<!DOCTYPE' not in html and '<head' not in html and '<body' not in html\\n\\n    # Demoted semantics (no <section>/<article>)\\n    assert '<section' not in html and '<article' not in html\\n\\n    # TOC anchors replaced with spans\\n    assert '<a href=\"#club-announcements\"' not in html\\n    assert re.search(r'<span[^>]*>Club Announcements</span>', html)\\n\\n    # List normalization (no UL>UL duplicates)\\n    assert html.count('<ul>') == html.count('</ul>')\\n    assert '<ul><ul>' not in html\\n\\n    # Buttons simplified to minimal anchor link\\n    assert 'text-decoration:underline' in html\\n    assert 'background:' not in re.search(r'<a[^>]*>', html).group(0)\\n\\n    # Style rules applied\\n    assert re.search(r'<a[^>]*style=\"margin:0; padding:0;', html)\\n    assert re.search(r'<img[^>]*style=\"margin:0; padding:0;', html)\\n    assert 'border-collapse:collapse' in html\\n    assert re.search(r'<td[^>]*style=\"border:none;', html)\\n\\n    # IDs preserved and internal href normalized (even though TOC anchors were removed)\\n    assert 'id=\"club-announcements\"' in html\\n    assert 'href=\"#club-events\"' in html\\n"
      }
    ],
    "post_actions": [
      "Run: ruff check . --fix || true",
      "Run: pytest -q",
      "Run: npm run build || yarn build || true",
      "Commit with message: refactor(export): FrontSteps-only exporter with sanitizer-aware pipeline; remove legacy exporters; add tests"
    ]
  }
}
