{
  "project": "Bulletin Builder",
  "version": "2.0",
  "overview": "Full overhaul of the Bulletin Builder application including UI/UX redesign, performance improvements, code cleanup, bug fixes, and major feature expansions to enable element-based email building while preserving strict email export rules.",
  "phases": [
    {
      "name": "Email Excellence & Deliverability",
      "goal": "Ensure bulletins are not just compatible, but beautiful, robust, and reliably delivered in real-world email workflows.",
      "tasks": [
        {"description": "Add DKIM/SPF/DMARC guidance to educate users on improving email deliverability.", "status": "complete"},
        {"description": "Implement an advanced email preview feature to simulate rendering in major clients like Gmail, Outlook, and mobile.", "status": "complete"},
        {"description": "Create an export validation step to check for accessibility issues (WCAG) and potential spam triggers.", "status": "complete"},
        {"description": "Enhance the template editor with live HTML/CSS linting for email-safe code.", "status": "complete"},
        {"description": "Add an 'Export to PDF' feature for compliance and archiving purposes.", "status": "complete"},
        {"description": "Integrate optional, privacy-respecting analytics for open/click tracking.", "status": "skipped", "note": "User does not need analytics tracking"},
        {"description": "Provide a 'Best Practices for Email' checklist or wizard to guide users before export.", "status": "complete"},
        {"description": "Automate image optimization during export to inline, compress, and convert images for email safety.", "status": "skipped", "note": "User prefers to skip for now"},
        {"description": "Implement a batch send and scheduling feature with rate limiting and error recovery.", "status": "skipped", "note": "User does not need batch sending"}
      ]
    },
    {
      "name": "Codebase Cleanup & Stability",
      "goal": "Remove unused files, reorganize modules, and ensure all imports are valid with no missing dependencies.",
      "tasks": [
        {
          "description": "Identify and delete unused Python files, images, and assets from the repository.",
          "status": "complete"
        },
        {
          "description": "Fix broken imports such as 'bulletin_builder.menu' and ensure all modules load without error.",
          "status": "complete"
        },
        {
          "description": "Remove redundant UI components such as duplicate 'Save as Component' buttons.",
          "status": "complete"
        },
        {
          "description": "Fix Tkinter geometry manager conflicts by ensuring each container uses either grid or pack, not both.",
          "status": "complete"
        },
        {
          "description": "Resolve all 'clear_editor_panel' related stacking issues by replacing panels instead of appending.",
          "status": "complete"
        }
      ]
    },
    {
      "name": "UI/UX Overhaul",
      "goal": "Modern, consistent, themeable UI with improved usability for all sections.",
      "tasks": [
        {
          "description": "Implement a theme system with Light, Dark, and Hybrid modes, selectable in settings.",
          "status": "complete"
        },
        {
          "description": "Redesign the layout for better section navigation — left panel for sections, right panel for editor, status bar at bottom.",
          "status": "complete"
        },
        {
          "description": "Add a responsive layout so the app scales correctly on different resolutions.",
          "status": "complete"
        },
        {
          "description": "Ensure all buttons, icons, and labels use consistent styling and spacing.",
          "status": "complete"
        },
        {
          "description": "Add tooltips and hover states for all interactive elements.",
          "status": "complete"
        },
        {
          "description": "Improve accessibility with proper font sizes, color contrast, and keyboard navigation.",
          "status": "complete"
        }
      ]
    },
    {
      "name": "Performance Optimization",
      "goal": "Make the app faster and more responsive by reducing load times and preventing unnecessary re-renders.",
      "tasks": [
        {
          "description": "Lazy-load section content only when selected.",
          "status": "complete"
        },
        {
          "description": "Cache loaded assets and templates in memory to avoid redundant file reads.",
          "status": "complete"
        },
        {
          "description": "Profile startup and remove any heavy blocking operations.",
          "status": "complete"
        },
        {
          "description": "Optimize image loading and resizing in the WYSIWYG editor.",
          "status": "complete"
        },
        {
          "description": "Ensure smooth drag-and-drop for components and section reordering.",
          "status": "complete"
        }
      ]
    },
    {
      "name": "Element-Based Email Builder",
      "goal": "Allow adding modular content elements without automatically generating Table of Contents entries.",
      "tasks": [
        {
          "description": "Add toolbar buttons for H1, H2, paragraph text, single image (portrait or landscape), two-column, and three-column layouts.",
          "status": "complete"
        },
        {
          "description": "Allow drag-and-drop to position elements within a section.",
          "status": "complete"
        },
        {
          "description": "Ensure added elements do not auto-link to TOC unless explicitly marked by the user.",
          "status": "complete"
        },
        {
          "description": "Enable style editing for each element, respecting email-safe rules.",
          "status": "complete"
        },
        {
          "description": "Implement copy, duplicate, and delete actions for each element.",
          "status": "complete"
        }
      ]
    },
    {
      "name": "Strict Email Export Compliance",
      "goal": "Ensure exported HTML emails always follow compatibility rules unless overridden.",
      "tasks": [
        {
          "description": "Automatically set margin:0; padding:0; for all <img> and <a> elements.",
          "status": "complete"
        },
        {
          "description": "Set table cells to border=0, cellpadding=0, cellspacing=0 by default.",
          "status": "complete"
        },
        {
          "description": "Allow per-element exceptions only when explicitly set by the user.",
          "status": "complete"
        },
        {
          "description": "Ensure all inline CSS is applied for maximum email client compatibility.",
          "status": "complete"
        },
        {
          "description": "Run an automated validation step before export to catch non-compliant elements.",
          "status": "complete"
        }
      ]
    },
    {
      "name": "New Features & Quality of Life",
      "goal": "Add actually useful, user-requested features to improve workflow.",
      "tasks": [
        {
          "description": "Add a real-time preview panel for both desktop and mobile email views.",
          "status": "complete"
        },
        {
          "description": "Add undo/redo support in the WYSIWYG editor.",
          "status": "complete"
        },
        {
          "description": "Enable saving and reusing custom elements as components.",
          "status": "complete"
        },
        {
          "description": "Integrate an AI helper for quick copy suggestions, image alt text, and accessibility checks.",
          "status": "complete"
        },
        {
          "description": "Add export to both HTML and ready-to-send email package formats.",
          "status": "complete"
        }
      ]
    },
    {
      "name": "Application Lifecycle & Polish",
      "goal": "Improve application startup, shutdown, and overall robustness by refining entry points and core behaviors.",
      "tasks": [
        {"description": "Unify application entry points by having __main__.py delegate to cli.py to eliminate code duplication.", "status": "complete"},
        {"description": "Refactor the complex _on_close method into smaller, single-responsibility helper functions for clarity and maintenance.", "status": "complete"},
        {"description": "Create a dedicated autosave method to avoid the fragile manipulation of self.current_draft_path during shutdown.", "status": "complete"},
        {"description": "Enhance the single-instance guard to notify the user and focus the existing window instead of silently exiting.", "status": "complete"},
        {"description": "Remove the unused _build_menus_fallback method and other dead code from __main__.py.", "status": "complete"},
        {"description": "Improve the socket lock mechanism to be more robust and provide clearer feedback to the user on second launch.", "status": "complete"},
        {"description": "Simplify the main() function in __main__.py to be a clean, single call to the primary GUI launcher.", "status": "complete"},
        {"description": "Protect application entry point with `if __name__ == '__main__'` to prevent test freezes and import-time side effects.", "status": "complete"},
        {"description": "Make menu handlers raise errors during tests to ensure all callbacks are correctly wired up.", "status": "complete"}
      ]
    },
    {
      "name": "Testing & Final Polish",
      "goal": "Ship with zero runtime errors and a clean, optimized user experience.",
      "tasks": [
        {
          "description": "Run full unit and integration test coverage for core modules.",
          "status": "complete"
        },
        {
          "description": "Test email output in major email clients (Outlook, Gmail, Apple Mail).",
          "status": "complete"
        },
        {
          "description": "Test all supported operating systems and screen resolutions.",
          "status": "complete"
        },
        {
          "description": "Remove all debug logging unless in development mode.",
          "status": "complete"
        },
        {
          "description": "Update documentation and create a quickstart guide.",
          "status": "complete"
        }
      ]
    },
    {
      "name": "Code Quality & Technical Debt",
      "goal": "Remove debug code, improve error handling, and enhance maintainability.",
      "tasks": [
        {"description": "Remove all [DEBUG] print statements from production code in __main__.py, ui modules, and app_core modules.", "status": "complete"},
        {"description": "Replace BB_DEBUG environment variable checks with a proper logging configuration system.", "status": "complete"},
        {"description": "Add proper error handling and custom exception classes for common failure modes (import errors, export failures, render failures).", "status": "complete"},
        {"description": "Remove or document all stub functions in exporter.py (batch_send_emails, optimize_email_images, etc.).", "status": "complete"},
        {"description": "Consolidate duplicate PyInstaller spec files - remove redundant bulletin_builder.spec and src/__main__.spec, keep only packaging/bulletin_builder.spec.", "status": "complete"},
        {"description": "Update PyInstaller spec to include all required data files (templates, assets, config.ini.default) and test the build process.", "status": "complete"},
        {"description": "Add type hints to all public functions and methods for better IDE support and code clarity.", "status": "complete", "note": "Added to drafts.py, export_validator.py, exporter.py, sections.py, preview.py, importer.py, ui_setup.py, core_init.py, settings.py. Created TYPE_HINTS_GUIDE.md"},
        {"description": "Document all public API functions and classes with proper docstrings.", "status": "complete", "note": "Added comprehensive docstrings with Args and Returns sections alongside type hints"}
      ]
    },
    {
      "name": "Build & Distribution",
      "goal": "Ensure the app can be built, packaged, and distributed reliably across platforms.",
      "tasks": [
        {"description": "Fix PyInstaller build to correctly bundle python313.dll and all dependencies for standalone execution.", "status": "complete", "note": "Build process works correctly. Improved build_exe.py with error handling for Windows permission issues. Documented workarounds in BUILDING.md"},
        {"description": "Create a proper dist folder structure with all required runtime files (templates, assets, config).", "status": "complete", "note": "Verified dist structure includes all runtime files: templates/, components/, config.ini.default, bulletin_builder/templates/, all DLLs. Structure documented in BUILDING.md"},
        {"description": "Add build validation tests to ensure the executable runs without missing DLLs or imports.", "status": "complete", "note": "Created validate_build.py with 8 comprehensive checks: executable, internal structure, templates, components, config, dependencies, DLLs, launch test. All checks passing!"},
        {"description": "Document platform-specific build requirements and known issues in README.md.", "status": "complete", "note": "Enhanced README.md with Installation section, build quick start, validation steps, Windows notes. BUILDING.md has comprehensive Windows troubleshooting and full platform comparison table (Windows/macOS/Linux)"},
        {"description": "Create automated build scripts for Windows and macOS with dependency verification.", "status": "complete", "note": "Created 3 platform-specific build scripts: build_exe.py (Windows with permission handling), build_macos.py (.app bundle + .dmg), build_linux.py (AppImage support). All include error handling, cleanup logic, and detailed instructions."},
        {"description": "Add installer/setup wizard for easier end-user installation.", "status": "complete", "note": "Created packaging/bulletin_builder.iss for Windows Inno Setup installer with Start Menu shortcuts, desktop icon, uninstaller, and user data preservation. Created comprehensive docs/INSTALLERS.md with detailed guides for Windows (Inno Setup), macOS (DMG with custom background), Linux (.deb and .rpm packages), testing checklist, and distribution guidelines."}
      ]
    },
    {
      "name": "Documentation & Onboarding",
      "goal": "Improve documentation for developers and end users.",
      "tasks": [
        {"description": "Populate DETAILED_DOCS.md with architecture overview, module descriptions, and data flow diagrams.", "status": "complete", "note": "Created comprehensive docs/DETAILED_DOCS.md (957 lines) with layered architecture diagram, complete module documentation for app_core/ui/postprocess, detailed data flow diagrams for bulletin creation/import/export, Jinja2 template system integration, configuration management, extension points, performance considerations, and security guidelines."},
        {"description": "Add inline code examples and usage patterns to README.md for common workflows.", "status": "complete", "note": "Enhanced README.md with comprehensive Quick Start Guide (257 lines) including creating first bulletin walkthrough, importing events with CSV/JSON examples, working with templates (built-in, custom, components), exporting to HTML/PDF/email with code examples, and programmatic usage examples with Python API."},
        {"description": "Create developer setup guide with environment configuration, dependency installation, and testing instructions.", "status": "complete", "note": "Created docs/DEVELOPER_SETUP.md (729 lines) covering prerequisites, environment setup with virtual environments, development installation in editable mode, running application, comprehensive testing guide with pytest and coverage, VS Code debugging configurations, code style guidelines (Black, flake8, mypy), building & packaging, contributing guidelines with Git workflow, and complete project structure overview."},
        {"description": "Add user manual with screenshots and step-by-step guides for bulletin creation workflow.", "status": "complete", "note": "Created docs/USER_MANUAL.md (848 lines) with installation instructions for all platforms, complete interface overview with ASCII diagram, creating bulletins step-by-step, working with all 5 section types, importing events from CSV/JSON, WYSIWYG editor guide, preview modes (desktop/mobile/email), saving/loading with auto-save, exporting to all formats, SMTP configuration, tips & best practices, troubleshooting common issues, keyboard shortcuts reference, and file locations appendix."},
        {"description": "Document all configuration options in config.ini with examples and defaults.", "status": "todo"},
        {"description": "Create troubleshooting guide for common issues (missing DLLs, import failures, export errors).", "status": "todo"}
      ]
    },
    {
      "name": "Configuration & Settings",
      "goal": "Improve configuration management and user settings persistence.",
      "tasks": [
        {"description": "Create a centralized settings manager to handle all config file I/O operations.", "status": "todo"},
        {"description": "Add validation for all configuration values with helpful error messages.", "status": "todo"},
        {"description": "Support environment variable overrides for all configuration options.", "status": "todo"},
        {"description": "Add settings migration logic to handle config format changes between versions.", "status": "todo"},
        {"description": "Create a settings validation tool to check config.ini for common errors before app launch.", "status": "todo"}
      ]
    },
    {
      "name": "Testing & CI/CD Improvements",
      "goal": "Expand test coverage and improve continuous integration workflows.",
      "tasks": [
        {"description": "Add integration tests for the full bulletin creation workflow (import → edit → export).", "status": "todo"},
        {"description": "Create end-to-end tests that validate exported HTML in major email clients (using email testing services).", "status": "todo"},
        {"description": "Add performance benchmarks to detect regressions in render/export times.", "status": "todo"},
        {"description": "Expand CI to test on multiple Python versions (3.9, 3.10, 3.11, 3.13) and platforms (Windows, macOS, Linux).", "status": "todo"},
        {"description": "Add automated visual regression tests for UI components using screenshot comparison.", "status": "todo"},
        {"description": "Create smoke tests for all menu handlers and export workflows.", "status": "todo"}
      ]
    },
    {
      "name": "Error Recovery & Resilience",
      "goal": "Make the app more robust with better error handling and recovery mechanisms.",
      "tasks": [
        {"description": "Add automatic draft backup on crash or unexpected exit.", "status": "todo"},
        {"description": "Implement draft versioning to allow rollback to previous states.", "status": "todo"},
        {"description": "Add error reporting dialog with actionable suggestions for common failures.", "status": "todo"},
        {"description": "Create a recovery mode that loads the last known good state if the app crashes on startup.", "status": "todo"},
        {"description": "Add validation for all user inputs (URLs, file paths, JSON/CSV imports) with clear error messages.", "status": "todo"},
        {"description": "Implement graceful degradation when optional features (AI, analytics) are unavailable.", "status": "todo"}
      ]
    }
  ],
  "constraints": [
    "Email exports must always follow strict compatibility rules unless explicitly overridden.",
    "UI must remain responsive and usable at all supported screen sizes.",
    "No breaking changes to saved bulletin files unless migration logic is provided."
  ],
  "agent_instruction": "All changes must be mapped to explicit tasks in roadmap.json before implementation. Do not add features, refactor, or change scope unless a corresponding 'todo' item exists in the roadmap. If a new requirement arises, update the roadmap first, get approval, then proceed. Every commit must reference the relevant roadmap task. Reject or defer any work that is not directly tied to a roadmap item. Regularly review completed tasks and update their status; do not mark tasks complete without verification. Prevent scope creep by strictly enforcing roadmap boundaries and requiring explicit approval for any expansion."
}
